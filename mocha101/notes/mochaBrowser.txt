Mocha in the browser
The Mocha test runner can also be used in the browser. Every release of Mocha contains builds of 
./mocha.css and ./mocha.js for use in the browser. Here is a simple setup to run Mocha tests on 
the browser.

Set up the public files
Create a new public directory in the root of your project. Next, create a new file named index.html 
in the just created public directory and add the following content to it:

<!-- public/index.html -->

<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>Mocha Tests</title>
  
  <!-- Include Mocha CSS styles -->
  <link href="https://cdn.rawgit.com/mochajs/mocha/2.2.5/mocha.css" rel="stylesheet">
</head>

<body>
  <div id="mocha"></div>
  
  <!-- Add the Chai assertion library -->
  <script src="http://chaijs.com/chai.js"></script>
  
  <!-- Add the Mocha test library -->
  <script src="https://cdn.rawgit.com/mochajs/mocha/2.2.5/mocha.js"></script>
  
  <script>
    // Set chai.expect as a global variable
    var expect = chai.expect;
    
    // Setup Mocha to use the BDD interface
    mocha.setup('bdd');
  </script>
  
  <!-- Import the sum function -->
  <script src="/sum.js"></script>
  
  <!-- Import the tests for the sum function -->
  <script src="/sum.test.js"></script>
  
  <script>
    // Run the tests with Mocha
    mocha.run();
  </script>
    
</body>
</html>

Here, notice that the static CSS and JS files for Mocha and the Chai assertion library have been 
imported into the page. The element serves as the mount point for displaying the test results.

In setting up Chai, chai.expect is mapped to a global variable named expect so that it can be used 
in the test scripts for making assertions.

Mocha is setup to use the BDD interface by calling mocha.setup(‘bdd’). The tests are run using the 
mocha.run() method.

Next go ahead and create a new sum.js file inside the public directory you created earlier and add 
the following content to it:

/* public/sum.js */

function sum() {
  // Convert arguments object to array
  var args = Array.prototype.slice.call(arguments);
  
  // Throw error if arguments contain non-finite number values
  if (!args.every(Number.isFinite)) {
    throw new TypeError('sum() expects only numbers.')
  }
  
  // Return the sum of the arguments
  return args.reduce(function(a, b) {
    return a + b
  }, 0);
}


Next, create a new sum.test.js file in the public directory with the following content:

/* public/sum.test.js */

describe('#sum()', function() {
  context('without arguments', function() {
  
    it('should return 0', function() {
      expect(sum()).to.equal(0)
    })
    
  })
  
  context('with number arguments', function() {
  
    it('should return sum of arguments', function() {
      expect(sum(1, 2, 3, 4, 5)).to.equal(15)
    })
    
    it('should return argument when only one argument is passed', function() {
      expect(sum(5)).to.equal(5)
    })
    
  })
  
  context('with non-number arguments', function() {
  
    it('should throw error', function() {
      expect(function() {
        sum(1, 2, '3', [4], 5)
      }).to.throw(TypeError, 'sum() expects only numbers.')
    })
    
  })
})


Setup a simple server
Next, optionally setup a simple server to serve the public files. For this demo, live-server will 
be used. Go ahead and install it as a dependency for your project as follows:

npm install --save-dev live-server

Modify the “scripts” section of your package.json file to include a script for serving the public 
files and running the Mocha tests in the browser. It should look like this:

/* package.json */

{
  "scripts": {
    "test": "mocha",
    "test:browser": "live-server --port=9000 --mount=/:public"
  }
}

Here a “test:browser” script has been added, to start the live server on port 9000 and to serve 
the files from the public directory.

Finally, run the new script as follows:

npm run test:browser

This should start the server on port 9000 and launch a browser tab for you. 